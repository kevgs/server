# The test verifies few server/engine recovery options combinations.
# Specifically, MDEV-13437,13438 are concerned with no crashes
# due to a pair of --innodb-read-only=1 --tc-heuristic-recover=ROLLBACK.
#
# The whole test consists of 6 phases, see (labels) echoed.
# Initially the test commits a transaction and in the following proceeds
# through 6 phases, see (label) echoed.
# Within them the server is shut  down and attempted to restart, to succeed
# that in the end.
# All this proves no crashes and effective uncommit of the transaction
# which is asserted.
#
--source include/have_innodb.inc
--source include/have_binlog_format_mixed.inc

# An option is to not require have_debug which would reduce
# the number of notes in the error the test is grepping from.
--source include/have_debug.inc

CREATE TABLE t1 (i INT) ENGINE=InnoDB;
FLUSH TABLES; # we need the table post crash-restart, see MDEV-8841.
INSERT IGNORE INTO t1 VALUES (1);

# Now take a shapshot of the last time server options.
#
# The "restart" expect-file facility can't be engaged because the server
#  having conflicting options may not succeed to boot up.
# Also notice $MYSQLD_CMD is too "static" being unaware of the actual options
# of the last (before shutdown or kill) server run.
# That's why $MYSQLD_LAST_CMD that allows for the server new start
# with more options appended to a stub set which is settled at this very point.
--let $mysqld_stub_cmd= $MYSQLD_LAST_CMD

--let $restart_parameters= --innodb-force-recovery=3
--echo *** (1) Kill the server and (2) restart with $restart_parameters.
--let $shutdown_timeout= 0
--source include/restart_mysqld.inc


# We will try to start the server again with $restart_parameters, which will end in
# **no** actual rollback because of read-only true.
--let $restart_parameters= --innodb-force-recovery=0 --innodb-read-only=1 --tc-heuristic-recover=ROLLBACK
--echo *** (3)  Shut down, and (4) restart with conflicing recovery options:
--echo ***                            $restart_parameters.
--exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--shutdown_server 30
--source include/wait_until_disconnected.inc

# prepare the to-be-failing server restart error log for grepping
--let SEARCH_FILE= $MYSQLTEST_VARDIR/tmp/my_restart.err
--error 0,1
--remove_file $SEARCH_FILE

--error 1
--exec $mysqld_stub_cmd $restart_parameters > $SEARCH_FILE  2>&1

# The server won't complete initialization due to the heuristic option
--let SEARCH_PATTERN= \[ERROR\] Can\'t init tc log
--source include/search_pattern_in_file.inc
# and the transaction is left intact. That is
--echo *** the following search MUST report NOT FOUND into the result file!
--let SEARCH_PATTERN= \[Note\] rollback xid
--source include/search_pattern_in_file.inc

--remove_file $SEARCH_FILE


--let $restart_parameters= --innodb-force-recovery=0 --innodb-read-only=0 --tc-heuristic-recover=ROLLBACK
--echo *** (5) restart with non-conflicing recovery options: $restart_parameters

--error 1
--exec $mysqld_stub_cmd $restart_parameters > $SEARCH_FILE  2>&1

# The server won't complete initialization due to the heuristic option
--let SEARCH_PATTERN= \[ERROR\] Can\'t init tc log
--source include/search_pattern_in_file.inc
# but this time the transaction is rolled back
--let SEARCH_PATTERN= \[Note\] rollback xid
--source include/search_pattern_in_file.inc

--remove_file $SEARCH_FILE


--echo (6) The server restarts stably now.

--let $restart_parameters= --innodb-force-recovery=0
--exec echo "restart: $restart_parameters" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--enable_reconnect
--source include/wait_until_connected_again.inc

# Another prove of (5) to assert t1 is empty:
if (`SELECT COUNT(*) <> 0 from t1`)
{
   --die Unexpected not empty table.
}

# Cleanup
DROP TABLE t1;


